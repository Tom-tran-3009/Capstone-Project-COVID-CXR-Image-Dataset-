import tkinter as tk
from tkinter import Label, Button, Entry, filedialog
from keras.models import load_model  # TensorFlow is required for Keras to work
from PIL import Image, ImageOps  # Install Pillow instead of PIL
import numpy as np

# Disable scientific notation for clarity
np.set_printoptions(suppress=True)

# Load the model
model = load_model("Software Technology 1\ST 1_Capstone Project_Tom TRAN\Capstone Project\keras_model.h5", compile=False)

# Load the labels
class_names = open("Software Technology 1\ST 1_Capstone Project_Tom TRAN\Capstone Project\labels.txt", "r").readlines()

# Function to make predictions and update the label
def predict_and_update_label():
    # Create the array of the right shape to feed into the Keras model
    data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)

    # Get the image path from the entry field
    image_path = image_entry.get()
    if not image_path:
        return  # Do nothing if the entry field is empty

    image = Image.open(image_path).convert("RGB")

    # Resizing the image to be at least 224x224 and then cropping from the center
    size = (224, 224)
    image = ImageOps.fit(image, size, Image.Resampling.LANCZOS)

    # Turn the image into a numpy array
    image_array = np.asarray(image)

    # Normalize the image
    normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1

    # Load the image into the array
    data[0] = normalized_image_array

    # Predict the model
    prediction = model.predict(data)
    index = np.argmax(prediction)
    class_name = class_names[index]
    confidence_score = prediction[0][index]

    # Update the prediction label text
    prediction_label.config(text=f"Class: {class_name[2:]} | Confidence Score: {confidence_score:.2%}")

# Function to open a file dialog for image selection
def browse_image():
    file_path = filedialog.askopenfilename()
    if file_path:
        image_entry.delete(0, tk.END)  # Clear any previous text in the entry
        image_entry.insert(0, file_path)

# Create the main tkinter window
window = tk.Tk()
window.title("Image Classification For Covid CXR Dataset")

# Create a label for user instructions
instruction_label = Label(window, text="Enter the path to an image or browse to select one:")
instruction_label.pack()

# Create an entry field for image path
image_entry = Entry(window, width=40)
image_entry.pack()

# Create a "Browse" button
browse_button = Button(window, text="Browse", command=browse_image)
browse_button.pack()

# Create a button to trigger the prediction
predict_button = Button(window, text="Predict", command=predict_and_update_label)
predict_button.pack()

#Exit button
Exit = tk.Button (window,text="Exit",command= window.destroy)
Exit.pack()

# Create a label for displaying the prediction
prediction_label = Label(window, text="", font=("Helvetica", 12))
prediction_label.pack()

# Function to stop the application when the window is closed
def close_window():
    window.destroy()

window.protocol("WM_DELETE_WINDOW", close_window)

window.mainloop()
